//****Proyecto final de AG
//Edward Hernández & Rafa Mariona & Konny Amaya & Carlos Padilla
//EN DIBUJAR CUBO SE PUEDE CAMBIAR EL COLOR DE LOS CUADS
//TENIENDO EN CUENTA EL FOR DE LA FUNCION DONDE SE DIBUJA EL MAPA

#include <GL/glut.h>
#include <math.h>
#include <stdio.h>
#include <vector>
#include "SDL/SDL.h"
#include "SDL/SDL_mixer.h"
#define MOV_ARRIBA      1
#define MOV_ABAJO       2
#define MOV_IZQUIERDA   3
#define MOV_DERECHA     4
using namespace std;



//la musica de fondo
Mix_Music *music = NULL;

//el efecto de sonido
Mix_Chunk *scratch = NULL;

/* Constantes para la luz */
const GLfloat light_ambient[]  = { 0.0f, 0.0f, 0.0f, 1.0f };
const GLfloat light_diffuse[]  = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_specular[] = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat light_spot_dir[] = { 0.0f, 0.0f, 0.0f};
const GLfloat light_attenuation[] = {1.0f};
GLfloat light_position[] =       { 2.0f, 5.0f, 5.0f, 0.0f };

const GLfloat mat_ambient[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_diffuse[]    = { 0.7f, 0.7f, 0.7f, 1.0f };
const GLfloat mat_specular[]   = { 1.0f, 1.0f, 1.0f, 1.0f };
const GLfloat high_shininess[] = { 100.0f };

//*****variables para mover camara según cubo****
const GLfloat maxCamY = 200.0f, minCamY = 60.0f;
GLfloat posObjeto = -5.0f;
GLfloat anguloCamaraY = 0.0f;
GLfloat anguloCamaraX = 0.0f;
GLfloat camX,camY,camZ;
GLfloat deltay = 4;
bool salto; //sirve para saber si saltaremos
int saltocont=0;
//los movientos utilizados seran almacenados para porder moverse en toda la matriz
int avancex=0, avancez=0;

unsigned int textureID;  //variable para la textura
int xx[40],yy[40];
int fin=0;
float initX, initZ; //(initX,initZ) esquina superior izquierda de todo el mapa
int posX, posZ; //(posX,posZ) posición en la matriz actual del jugador
int posXi, posZi;
float xActual,zActual;
float xActuali,zActuali;
float rotx=0,roty=0;
int tamCubo=20,espacios=tamCubo/2;
const int altoMapa=40,largoMapa=40;
// 0 = espacio
// 1 = pared
// 2 = mover cubo
// 3 = destino
// 4 = reset
// 5 = agujeros
int mapa[altoMapa][largoMapa]= {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
                                1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,
                                1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
                                1,0,0,0,0,1,5,1,0,0,0,0,0,0,0,0,1,0,1,5,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,4,1,0,1,5,1,0,1,4,1,1,4,1,0,1,
                                1,0,0,0,0,0,0,0,4,0,0,4,0,4,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,
                                1,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,
                                1,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,4,0,0,0,4,1,0,1,5,0,0,4,1,0,1,
                                1,0,0,0,4,0,0,4,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,4,0,4,0,0,1,4,0,4,4,4,4,1,0,1,4,1,0,1,4,1,0,1,4,1,1,5,1,0,1,
                                0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,4,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,4,0,0,4,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,
                                0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4,4,0,1,0,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,0,0,0,0,1,0,1,5,0,0,0,4,1,0,1,4,0,0,4,1,0,1,
                                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

//texto a mostrar
void text(){
    char text[62];
    sprintf(text, "Laberinto 3D en Algoritmos Graficos MAZECUBE", 1,1);
    glColor3f(1.0, 0.0, 0.0);
    glRasterPos3f( -130 , 223 ,0);
    for(int i = 0; text[i] != '\0'; i++)
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);

}

/* GIMP RGB C-Source image dump (ladrillos.c) */
struct ttextura_gimp {
  unsigned int    width;
  unsigned int     height;
  unsigned int     bytes_per_pixel; /* 3:RGB, 4:RGBA */
  unsigned char    pixel_data[60 * 52 * 3 + 1];
};

struct ttextura_gimp textura_ladrillos = {
  60, 52, 3,
  "\323\261\237\257NH\271^Z\315\241\224\256IE\306\205{\254=>\320\246\227\262"
  "XQ\262LH\317\250\230\254IC\263ZU\316\247\224\250;\070\271zp\250QM\307\225"
  "\207\270b\\\270vj\333\305\264\300rj\253?=\325\262\243\263RN\274ic\303\205"
  "y\255:\071\255DA\322\254\235\264^Z\312\227\210\312\232\216\310\216\203\256"
  "=\067\305\214\200\304\205}\254CA\304\212\177\255\070\065\254>=\317\245\227\273"
  "hb\276vm\324\265\243\306\214\202\262HC\264^Y\322\246\230\246\067\067\305\217"
  "\204\261LF\252:\066\277\200t\275wp\266_W\320\253\232\267vk\274th\244\064\061"
  "\255NI\307\227\213\260MJ\266YS\325\267\246\254IE\277to\255JG\263QN\321\246"
  "\227\255SL\273rn\322\250\233\277xo\305\207{\246?;\306\227\211\270|q\244\067"
  "\065\276\202z\277oc\254@<\315\241\220\254OH\271d\\\321\263\242\270c_\263V"
  "P\316\243\227\271mf\273f`\256SM\325\253\234\254>;\305\205|\311\207}\251:"
  ":\320\251\232\273lc\251C@\321\242\224\271ib\276tm\254A?\317\250\230\261T"
  "N\266f[\321\243\225\241\066\064\312\227\211\305\213\200\242''\311\226\207\267"
  "qi\301\210{\236,+\303\204w\303\206x\244\066\064\310\223\204\276xn\247;:\315"
  "\236\220\261NL\261OL\320\247\230\255IE\267b]\330\261\243\255MH\275yq\300"
  "\204z\255LJ\261YT\271ph\310\220\205\242=:\307\224\206\264^X\265TM\242\070"
  "\066\317\242\225\257OJ\275xq\307\225\205\261HD\314\224\211\267^]\263RN\323"
  "\253\237\256EC\300si\253;\066\300\200w\304{r\255C@\321\247\230\266ZT\307\213"
  "\200\264c[\256LH\316\245\226\257ID\272of\261RL\261aY\305\217\201\242\067\064"
  "\313\224\206\273md\275wl\306\204~\244\064\060\317\235\215\271me\246A=\271o"
  "h\235\066\064\306\223\204\261]U\263hb\271zn\250@>\323\261\240\256QM\262NK\330"
  "\267\250\322\254\231\251B>\274tn\324\262\242\273yr\252\066\064\310\217\205"
  "\254FD\302\205z\302\212}\247=\071\317\243\226\255XT\331\270\245\255LG\276"
  "xr\310\232\217\254\065\065\302~u\251<\071\324\255\240\264ZX\267SM\313\234\217"
  "\252\062\062\277|v\315\217\204\254B?\326\264\245\257GF\266e\\\244\070\064\320"
  "\247\227\266d]\260ME\317\246\227\253=<\255OK\317\242\224\246\064\064\317\240"
  "\221\274sm\260SO\252<\070\310\216~\307\211\177\245\065\062\323\253\232\257P"
  "N\243')\307\222\205\261YS\246GC\262kc\332\274\250\272e_\251>=\326\272\251"
  "\255FB\267e`\312\226\207\252><\300wm\247FB\335\304\262\257OI\263_Y\311\237"
  "\222\247\065\063\305\214\201\271ui\260VO\335\315\267\254TN\265[X\300\204y\313"
  "\245\226\262QN\266XS\303\200w\253;\070\326\260\242\261PO\304sj\323\267\250"
  "\322\240\222\250\070\064\310\220\210\317\252\231\262SR\270a[\302\204|\247\064"
  "\063\332\264\243\261ZV\267\\U\323\256\237\326\265\246\246<\070\305\205{\322"
  "\253\231\260RR\262YS\307\220\206\237\061/\311\222\204\277xq\245<:\333\267"
  "\246\314\240\220\277xo\244GB\325\253\230\305\215~\245\067\065\270md\264_X\250"
  "E=\320\247\227\256IE\271pg\316\242\224\263^Y\324\255\240\275sh\275kg\306"
  "\223\207\262]V\303\207}\253?<\310\220\204\262XQ\266b[\312\234\217\255MJ\262"
  "YU\322\256\237\300yr\272hc\317\243\224\301\201x\255\071:\320\235\222\255H"
  "G\302\177v\301\202y\266VP\262QJ\303\217\203\315\234\216\251C?\315\241\224"
  "\300~u\247\067\065\314\235\220\260QL\267f^\307\223\205\262RL\261TN\262bY\326"
  "\267\245\246<\070\313\230\213\302\204x\247\071\064\306\212}\273e]\245;\065\316"
  "\252\226\247C@\275pg\244@:\255]V\303\213~\237**\315\246\230\275tg\252DB\315"
  "\243\221\252B?\267YU\325\272\252\270ia\265e_\305\230\214\263a[\274og\250"
  "?>\304\214\200\253C?\314\235\220\254GC\266`X\321\253\235\325\256\237\272"
  "ja\301|t\307\210~\255IC\263YR\302wq\260HF\317\233\220\254>?\300vl\314\227"
  "\212\314\232\215\321\233\216\263WQ\313\231\217\256JH\263VP\300|o\254JE\317"
  "\237\222\256JG\267YT\312\230\213\277yo\323\261\237\250NH\304\210|\265aY\255"
  "HC\276|s\252GB\314\225\210\264\\W\251D?\313\227\211\255VQ\316\242\221\315"
  "\243\223\244\064\061\276~s\275\200p\266jc\276zr\255SN\337\274\257\251:;\266"
  "eY\305\216\201\252@=\307\227\213\320\250\226\251C>\267pi\330\271\251\300"
  "\211~\250IG\331\274\256\252B=\276ke\303\216\203\252\065\065\322\254\235\265"
  "kb\315\240\220\250\063\061\302\212\201\315\223\213\266PO\332\271\253\251;:"
  "\300zo\307\231\211\247\062.\325\257\241\257^Y\313\240\220\256;\067\262]V\314"
  "\225\211\254>;\324\264\244\247B<\265[T\320\254\233\245\067\065\302\200s\266"
  "ob\303\205z\264\\W\246;\065\307\223\206\242\066\062\326\255\237\256UP\252A>"
  "\332\273\246\270sm\240\063\062\271mf\300\211}\236\060/\246:\067\265ri\262XQ\247"
  "FB\331\267\245\247\065\063\256KG\242?<\312\235\222\252JC\266kd\317\242\226"
  "\243.)\270gb\270ld\247KD\326\262\242\253A?\306\212\203\264XS\253HH\327\267"
  "\253\257>=\277\200y\317\234\217\271lf\274ef\263[T\326\255\236\250\067\066\312"
  "\216\202\267[V\254=:\326\271\252\267^Y\262RM\331\270\250\274wp\271ic\252"
  "MH\335\273\251\250;\070\302~s\275rm\245/-\321\251\233\303\204x\241\063\061\310"
  "\221\206\310\222\203\275pg\245\065\063\326\262\241\255PM\262WO\305\220\202"
  "\253`Z\302\212z\243\070\064\303\206z\273sj\247IH\310\241\222\263XS\253NI\312"
  "\224\211\264^W\313\232\215\256JF\265ld\312\226\211\251>;\276\200u\264QM\306"
  "\206}\272ic\256JF\312\237\221\252::\263VQ\314\226\214\261KH\301ys\306\206"
  "|\254\071\067\267TR\275rl\267`[\263WS\317\237\222\254><\261OM\302ys\271e^\256"
  "YR\325\246\232\245\066\065\262JG\274qh\270gb\252E@\317\237\223\250?>\261VO"
  "\261XS\300|s\250@<\314\232\214\267k`\244\062\061\274si\267lc\247\066\063\312"
  "\231\212\253FB\264WP\275\206z\237\067\065\306\226\211\302\226\203\230\037!\304"
  "\224\207\264f^\305\207z\247\062\061\276uo\313\233\216\251\066\066\276un\310\216"
  "\201\250>:\313\245\227\272tj\260RM\303\215\203\302\205z\273oe\261SO\317\243"
  "\230\307\215\202\254?=\300\203z\304~u\252FF\314\227\216\265WS\274vn\314\237"
  "\223\276hb\270YU\301\205{\313\232\216\273]Y\263YT\310\225\210\246\065\065\301"
  "\201v\270e_\260MK\316\246\224\300yq\254HD\302\207z\277xl\277}r\251?;\306"
  "\223\205\262ZT\255KH\303\205{\236+,\322\256\233\303}u\247=:\311\223\205\247"
  "LH\230++\273\205{\266pf\323\263\242\301\201v\263ZU\326\256\241\253:\067\263"
  "SN\320\236\221\244\067\063\310\213\200\316\236\223\252<;\314\232\216\313\243"
  "\224\324\262\243\255KE\327\265\250\257MH\260GG\264[T\306\217\201\250\064\060"
  "\302\205z\310\214\177\253C@\326\270\247\326\266\250\254CA\323\255\240\254"
  "HG\273ja\255=;\315\242\222\262RN\256IE\326\257\241\250=:\315\242\221\335"
  "\304\261\246\071;\321\242\232\251OH\271e`\254HD\305\215~\301\207w\245,+\306"
  "\225\207\265`Z\251LE\332\300\253\247FC\305\205x\265qh\260VO\275oh\244=\071"
  "\331\273\245\276\204y\265cX\242\070\066\242\070\065\330\271\247\267qf\274qg\323"
  "\264\245\324\254\233\252\064\060\300|s\310\223\205\247\064\060\300\214\200\263"
  "ZT\246,,\305\207}\320\242\226\263^Y\327\266\246\265ib\313\234\220\254\071"
  "\067\307\213\201\323\242\225\253>:\315\236\221\256EB\314\221\204\316\237\224"
  "\272[W\327\262\244\256A=\306\207}\271]W\253MI\327\265\244\251@>\307\211~"
  "\266i_\306\214\177\315\233\216\263YR\333\275\256\252A<\265`Z\277\206z\245"
  "//\303\216\203\277yn\246KG\320\246\231\272zl\320\242\222\251HD\327\267\244"
  "\260QO\240\062\061\316\240\224\251JF\313\244\223\254OI\272od\306\217\200\251"
  "ZR\274ne\262ZV\312\230\211\243\063-\303zr\307\214\202\253?\070\314\231\214"
  "\314\235\216\251\064\065\316\234\221\264^W\302\210\177\260HF\302\211\177\324"
  "\250\234\252:\070\304\212\202\306\206}\253<:\317\246\231\262RO\262a[\266Z"
  "U\310\227\212\274hb\271me\333\303\262\273fc\263RN\322\250\232\256KG\302|"
  "s\267oe\254A=\270ZT\305\214\201\277xo\260RM\335\312\267\277\201u\250@<\311"
  "\222\207\302~s\254JG\306\211|\242\064\062\265TO\271th\307\217\203\246@;\320"
  "\252\230\307\233\215\254NG\257PH\244;:\305\220\204\254LG\263\\S\323\265\243"
  "\247C=\270c]\246\063.\302\206x\307\211|\253JE\317\243\226\273kd\275tj\305"
  "\204{\256C?\317\245\230\302tj\264RO\277\177v\253\065\065\305\207}\302zp\252"
  "GE\324\254\235\305\212\201\302\201y\260HE\322\246\231\305\210~\257>;\312"
  "\223\210\266YS\256QM\315\233\216\254?=\302\203w\315\251\232\303\202x\250"
  "?;\314\235\221\305\214\203\261JJ\303\177w\304\215\201\250>\071\312\224\213"
  "\271me\247HC\323\256\235\306\220\204\240.,\301\206{\303\216\200\266me\247"
  "==\313\240\220\260TO\262XQ\307\232\214\275\177s\245=:\320\251\232\254@>\265"
  "WO\324\253\236\246\067\064\307\212\201\313\236\217\251\070\067\311\236\221\264"
  "PK\277qk\255GD\307\214\202\276|t\257<:\321\250\233\271^W\250''\306\222\211"
  "\307\177v\251EA\333\271\252\257IG\252;:\312\207~\301\205z\260\070\070\322\244"
  "\227\273b_\257\071:\262II\321\255\236\251>;\310\217\205\303\207{\245)*\301"
  "\200u\304\201x\250\062\061\313\226\214\270`Z\254ME\251.,\306\216\202\271c^"
  "\251KC\327\256\240\244\067\064\262aW\311\223\210\240))\303\215~\265e]\265a"
  "Y\255?C\255PJ\312\231\213\244\067\067\271\177v\271tj\253QI\325\261\240\254"
  "<<\272gb\340\310\271\312\230\211\246-.\303\214\203\324\263\242\261UN\254"
  "A=\313\231\214\247;\071\324\253\234\270jc\260HG\321\250\233\321\247\233\312"
  "\217\204\251><\325\260\242\266mc\254=\071\314\234\222\252><\313\235\215\273"
  "pi\262EC\320\247\230\261^X\326\264\247\254GC\300\204{\307\227\217\247\063"
  "\060\304\212\177\247;\070\307\226\213\276zp\252DA\315\246\231\256MH\302\212"
  "~\305\204}\250DA\332\274\252\246B@\263`[\247F@\276\177p\306\222\210\243\066"
  "\064\313\240\221\255NI\255D>\320\240\223\251><\275~r\274{q\317\240\217\271"
  "g`\260XT\321\253\236\253A?\273tm\277\203v\253HC\271f`\277\177w\317\244\226"
  "\247\070\066\305\223\206\307\217\204\245\067\064\315\235\220\271jd\263ZT\325"
  "\273\255\256AA\272mf\263[R\325\270\251\261RM\267a\\\310\237\222\252C?\313"
  "\231\217\277qm\265OM\342\314\274\260[R\262UQ\270nf\315\244\231\273je\263"
  "QO\312\230\220\245;\067\314\222\207\275sn\254IB\326\265\247\311\230\215\244"
  "\066\062\301\206y\276\204w\303\202z\250C>\306\227\213\251D@\273uj\277\177u"
  "\246\071\070\316\243\224\324\263\242\252KG\270me\303\206{\267f[\242\067\065\264"
  "h`\262WQ\261PM\313\234\220\254A?\276wn\324\246\230\302\207\201\317\241\226"
  "\252LH\320\242\225\267^Z\260QN\305\203y\250<\070\314\225\213\263[W\265UR\321"
  "\255\240\260ZU\316\236\223\310\207{\261[V\315\231\215\273a\\\303\212\202"
  "\252::\310\215\203\271c\\\260SO\321\250\234\256PL\267mc\325\267\247\262U"
  "Q\303\204|\273vm\304\207~\251A=\304\207{\266lb\253E@\310\235\220\264]T\245"
  ":\066\315\242\225\277\204x\257WR\311\223\211\301\204y\253LH\273vm\274zq\245"
  "\067\066\307\231\215\265^X\250?<\260WP\254c\\\314\223\206\234-*\326\266\246"
  "\262ZS\270VS\315\237\222\251\062\061\267d_\320\260\241\242\070\066\320\252\234"
  "\256QM\276\204{\276g`\251ED\323\252\234\251;:\321\245\230\261KJ\261MI\335"
  "\306\265\302{r\261WR\326\255\242\262PM\266c]\252;\066\307\221\205\251C?\322"
  "\245\231\257SS\255KG\336\303\264\326\260\241\256HD\313\237\221\275ph\253"
  "JE\246\066\064\303\205z\251><\316\235\217\265[X\253??\317\244\231\330\271\250"
  "\274{p\255OH\311\231\213\246E@\241.-\272~t\246D@\305\206{\267nf\237\065\061"
  "\311\233\216\301\212\177\330\276\252\313\233\213\241\060\060\302\214\200\257"
  "g]\306\213\202\256SL\275sm\320\245\231\251\067\065\276xq\277tj\252AA\327\273"
  "\253\305\206|\250=;\324\260\243\302\202z\304\207~\253NJ\333\300\263\261F"
  "G\270e^\303\212~\253\071\070\312\235\217\315\237\224\273ld\256UP\331\271\252"
  "\306\215\203\254@@\331\272\254\260MJ\265]X\276\205x\254\070\067\306\223\207"
  "\265wn\306\222\207\246\066\064\311\223\207\311\225\210\242\065\061\326\263\243"
  "\260YR\256LE\307\225\212\242\064\064\304\205x\257i`\315\237\222\251MG\247G"
  "B\320\243\224\242\065\062\316\241\223\264e]\245\071\070\323\264\242\251RM\241"
  "\061\062\306\211~\271si\257LG\246B=\300\201w\253GB\274uo\312\227\214\252>:"
  "\253IC\275vo\305\206v\253A>\312\234\216\264VP\257HG\271ha\275kb\254D@\320"
  "\251\234\260LH\273e`\255D?\275\201v\277qj\262RQ\323\250\235\251\067\066\272"
  "d_\276rm\252D=\321\251\231\260LG\276qg\260LF\264\\V\315\231\216\254FD\310"
  "\226\212\273ql\255RL\277xp\244@;\315\240\222\262^Y\263aZ\270rh\242\066\066"
  "\322\257\241\256RJ\260^U\311\231\212\260WP\276zr\236\063\062\311\231\214\265"
  "c]\253MH\301\214\200\302\221\204\266h^\253MK\306\223\204\251?<\270qk\321"
  "\256\237\251GC\264b]\307\223\206\304\214\200\274ph\245;\067\316\237\224\264"
  "XR\273oh\312\224\210\252:\071\315\245\231\310\201y\256FE\310\230\213\262X"
  "T\315\225\213\270_V\266[V\317\227\216\245\065\065\312\211\202\261QP\275wp\305"
  "\204{\251B>\312\234\221\255KG\275sl\300~v\252EA\311\226\212\265\\V\252JH"
  "\273ph\255QL\304\213\177\243\065\062\304\216\201\260TQ\243\071\066\305\217\203"
  "\252NJ\264ha\306\222\206\245:\065\265_W\255UN\276\202x\234,-\304\210|\260"
  "ZR\251;:\264d\\\247DA\335\303\260\264bX\247A?\320\251\230\253IH\303\202z"
  "\251*)\304\222\205\275og\250\070\065\324\261\241\263TO\270ia\333\303\267\250"
  "\064\063\302\204z\273wm\277\201w\277jc\261NL\326\265\247\265MJ\255JF\324\250"
  "\232\255\066\070\312\232\217\264rg\262OM\311\235\223\266qk\302~u\253B?\322"
  "\260\242\303\207}\247\062\061\311\226\214\266d^\254TL\320\250\232\243\064\065"
  "\300\203x\273{n\306\212\177\245\070\066\301\211}\324\253\233\247B>\260^X\301"
  "\216\201\235/+\274\204x\272me\241=;\313\251\231\312\222\210\235-.\306\221"
  "\203\270zn\242?<\310\227\214\270uk\332\300\255\256RK\303\202y\312\224\210"
  "\251\064\061\276\200v\305~v\244\071\071\335\273\254\264_V\265XU\310\221\204\320"
  "\241\224\322\250\230\261UP\325\264\245\256KE\255?<\305\216\204\267\\V\261"
  "KH\325\266\242\255DA\277\177v\312\236\220\330\262\243\255KH\321\247\232\257"
  "LI\250@;\267f`\300\201x\243/.\306\222\207\300ys\251LH\332\275\256\325\265"
  "\247\252KF\315\242\225\256QI\253QL\246DB\311\232\217\252JG\253MJ\320\245"
  "\227\241:\066\301\203v\332\277\255\242@<\311\230\212\253\\V\251QJ\262^Z\257"
  "XR\305\223\206\305\227\207\247B<\252LI\253RN\327\271\252\254OJ\307\213\200"
  "\316\257\237\276qh\250=:\314\236\222\257NJ\263[U\303\214\201\253A@\256FC"
  "\304\201w\313\227\211\260WQ\322\257\237\312\233\216\274d]\263YV\326\253\234"
  "\261JH\274qj\273le\251?:\277wo\316\243\224\265[U\315\237\220\275wm\300\204"
  "y\252?<\311\225\214\301~s\251FA\304\211}\246<\071\265g_\314\241\222\260\\"
  "U\320\250\233\262d^\272\177t\250KH\257VP\316\244\226\245F?\272xm\273og\256"
  "[T\316\242\225\253SK\317\243\223\265ja\257YR\302\214\200\237./\313\243\222"
  "\246?\071\272si\304\216\202\270tl\255LI\307\220\203\272`Y\243\071\071\321\244"
  "\226\254OL\277rl\320\256\236\307\214~\247\071\070\314\236\221\275vl\272le\260"
  "RO\323\253\236\263PK\264[W\315\236\224\247\071\066\307\214\201\323\262\242"
  "\245\063\061\307\207{\274um\302\214\200\247>;\307\223\211\311\221\207\246<"
  "\071\311\231\214\272hc\254HD\323\260\241\252BA\271jf\276}t\270xo\266f`\251"
  "SO\331\303\262\255NI\265e_\311\235\221\245<\067\277\203v\270kd\241\067\063\300"
  "\204y\254[V\277\213\177\243\066\064\313\236\217\301\216\202\235\061/\304\211"
  "|\245EB\312\235\214\243\070\065\274xl\314\243\225\244\071:\256AA\247:\070\326"
  "\271\250\254KF\266oh\313\235\217\241//\276zs\277~u\252:\070\323\257\242\271"
  "^Y\272e`\256\071\071\265ZU\323\250\233\246\066\065\317\236\220\306\205}\270b"
  "]\306\216\204\251\060\062\313\241\222\300~u\264VQ\272nf\246,-\304\220\203\271"
  "g`\247C@\323\263\247\267nf\307\220\205\243\063\061\311\224\212\313\231\216"
  "\235\060/\320\247\230\250FD\255SM\306\223\207\240\061\061\275\202w\314\235\216"
  "\307\227\210\233\067\060\271rj\314\246\231\244FC\255bY\314\250\227\230.+\302"
  "\211|\261sm\250EB\265a\\\307\230\211\241+,\306\212\202\310\221\202\251C?"
  "\325\264\244\257XS\260ZT\314\240\222\244,,\305\221\206\250\071\070\314\231"
  "\220\273ib\250\067\070\325\257\243\262SO\255SN\325\271\252\252@>\313\220\207"
  "\300\177t\251==\255KH\306\204{\274|r\245\064\061\317\241\227\263c\\\246**\304"
  "\224\212\305\203z\252IG\332\273\257\246=<\246\067\064\277wo\303\207z\243++"
  "\304\214\203\267e_\242-.\246GB\315\245\225\245A>\300\201u\303\216\201\235"
  "&&\256VO\306\226\212\236-+\266}q\261mb\255VR\233+)\266pf\273~t\236\067\065"
  "\310\241\224\252OG\270pf\310\226\206\240\060.\302\203x\333\306\264\256KG\261"
  "PN\307\226\212\310\232\212\262SK\256MJ\312\227\212\251@>\313\237\222\274"
  "kb\256EB\320\253\237\322\262\243\251<\071\276yq\307\230\213\271ib\263JG\304"
  "\213\201\250A>\312\221\205\301xr\253DB\313\235\221\307\234\220\301\177t\255"
  "JD\314\237\221\271xp\250;\071\310\220\204\245><\302\204}\303\212}\245=<\312"
  "\231\212\266ul\315\237\222\251JH\271rj\317\261\242\242\064\065\265ph\252RN"
  "\262d[\310\230\213\241=:\302\213\200\266ja\265h_\303\216\202\236<\070\310"
  "\236\215\312\235\215\275~s\254IE\271og\317\241\224\243:\070\276\202w\277\204"
  "w\250B?\254QK\322\261\241\261TM\267ic\310\235\222\277\204{\247:;\307\220"
  "\204\275ul\256QO\321\254\242\255GD\254NJ\267le\327\271\252\241\062\060\302"
  "\214\201\316\245\231\242\071\067\304}w\301\201x\252B@\324\264\246\254PK\257"
  "TO\247MF\332\305\262\260TP\263_Z\321\261\242\245@<\267oc\302\211\200\245"
  "\071\066\316\253\235\272sj\246@?\257^X\273\201w\307\224\206\235\067\065\316\245"
  "\225\252UN\255OI\277\215\177\241\067\066\277\210{\314\247\230\237\070\066\275"
  "\202w\254ZS\237\066\064\237\067\063\273zn\241\067\063\261_Y\307\226\212\242-,\302"
  "\214\200\317\251\231\320\260\240\270g`\271vq\314\236\222\245\061/\255KI\303"
  "\212\200\242\063\062\311\225\214\262WP\257HE\334\275\261\273yq\332\273\254"
  "\253A@\311\230\214\275zr\241/\062\313\230\214\241\065\062\305\212\177\273pg"
  "\245\070\066\324\263\245\255YR\317\250\232\274\201u\251LG\313\236\220\246B"
  "@\306\214\202\247;\071\270ym\272|r\245\062\062\316\242\225\256\\U\250LG\324"
  "\272\250\247MF\270yo\270uk\276\201v\255TP\264aX\300\213}\235*(\300\215\200"
  "\266nd\230\040!\273xm\300\221\205\267h]\250NH\323\255\234\243\061/\274yo\303"
  "\210|\236&)\305\212\200\277\212{\243><\312\247\230\243@\071\316\243\226\260"
  "GF\274\177x\310\225\207\247C>\315\252\233\255JG\255GG\334\306\265\254IE\301"
  "\205|\302\210|\261XS\272ie\241\065\067\317\253\234\251;:\321\245\232\270\\"
  "W\242\071\070\335\312\272\300\204z\251A>\325\271\253\250NJ\261[T\237,'\306"
  "\227\211\246>=\313\226\214\260d\\\240\062\062\317\250\231\330\302\262\251O"
  "N\262h_\302\206{\246EB\226##\264tk\245KH\274|r\265wm\233**\300\220\204\304"
  "\232\215\321\260\236\270i_\244GB\307\225\205\255MH\305\220\205\253IF\302"
  "\205{\300\211z\242-.\301\206y\252KD\261gb\327\270\251\255PJ\265jb\306\220"
  "\205\263gb\275xr\256TO\317\252\232\262MI\262[T\277~t\244\064\066\315\246\231"
  "\307\223\211\250DC\306\220\211\306\211\177\301\177w\250@?\320\241\224\260"
  "XR\251MH\301\177v\247?\071\267{p\307\230\211\263b\\\260_X\312\236\221\272"
  "\200w\237;\070\311\235\220\267nf\244;\070\275\206|\242?\071\271sk\263xk\306"
  "\223\204\236;\070\261ib\311\236\220\240<\071\277\211|\273{r\235\065\063\313\242"
  "\225\253TQ\244EC\313\233\214\243>:\275oe\245D?\275\177w\247B>\276}r\306\217"
  "\202\236-+\253UP\304\222\205\251FA\266me\305\210}\242\062\061\275pk\262[U\265"
  "c\\\250@;\317\247\230\257TM\242\066\064\272ke\300\205|\247=:\304\214\201\265"
  "a\\\246\063\064\260YV\274wq\244\067\067\305\230\214\266`\\\256LI\237\065\064\302"
  "\213\177\260YU\265ga\303\220\207\244:\071\246GC\300\201w\240\067\065\276\213"
  "\200\272sl\247KE\254VQ\241E@\313\241\223\241\065\063\300\213|\270yq\240;\067"
  "\274\200t\230\065\061\270xp\270|q\237>\070\275\206z\315\245\226\241\067\065\302"
  "\206{\265pd\246/-\306\232\216\315\244\223\245\062\062\270qh\315\245\230\304"
  "\221\206\245<\071\256e]\306\222\207\236;\067\320\253\236\254VQ\261RO\331\301"
  "\262\271ng\251@>\304\226\214\305\222\207\277\206z\242/.\306\224\212\274l"
  "h\245D@\321\252\234\240\064\063\305\216\203\306\213\203\240/\060\304\225\210"
  "\252XS\314\246\227\242IF\252PL\307\227\211\233\061/\275|t\270ng\246OH\306"
  "\232\215\236++\274\177u\260XU\241<\070\317\241\224\226\060-\274\201w\267xn"
  "\226.+\266tl\242EA\301\224\204\232,,\265{n\255g\\\227)'\241;\067\267mf\313"
  "\255\235\241\065\062\261ul\303\213\201\256WQ\261\\W\245>\071\311\233\215\243"
  "A<\263f^\321\253\232\237\062\061\306\231\214\311\230\215\245\063\061\305\232"
  "\213\251TN\304\217\202\244\071\070\266hc\304\212\177\250.\060\302\214\200\274"
  "yq\243=;\332\305\263\241@<\267id\277\221\207\264jb\266b_\246?>\327\273\251"
  "\250JH\253EE\312\241\223\237:\066\273\202x\302\220\205\235.,\311\230\211\260"
  "g_\277\211}\235+,\277\216\201\317\252\227\226+)\260nc\270~s\226,,\301\221"
  "\203\256b]\236C@\307\236\221\304\221\204\223-)\301\215\200\260xl\261qg\276"
  "\204{\272\201u\315\245\223\241DB\307\227\213\272qi\254LG\307\231\213\250"
  "KF\264nb\312\231\213\237\067\065\303\202y\266g_\313\236\221\306\221\204\260"
  "^X\314\245\226\247GA\266ib\300\206|\243\071\065\303\217\201\302\205z\246C>"
  "\307\221\204\276}u\317\256\236\254RO\310\234\217\257XQ\244\070\067\277\203"
  "y\252RL\252TN\313\241\222\245GE\272xn\304\222\207\321\260\240\252UP\303\221"
  "\205\262h`\244B>\252SO\277\214\201\233\061\061\266lc\301\214\201\235>;\275"
  "\215\200\316\263\242\241OH\274\201u\264rh\235>:\245NH\255`W\275\212\177\252"
  "\\S\243EC\250QK\260h`\317\255\235\237<\067\311\235\216\310\236\214\252@<\263"
  "h^\302\205x\237\061\061\310\231\214\252OJ\273fa\253KG\275\204{\300\206z\246"
  "OK\330\273\252\276\177w\245=<\301\220\204\266jb\242C>\275\206z\246EB\253"
  "NI\261b\\\311\237\220\255SN\306\226\213\310\241\220\254RN\261ZT\306\235\220"
  "\243A=\261kd\261e^\240:\066\252SN\312\245\225\256]W\303\221\207\300\213|\274"
  "\203{\232\064\062\264wj\301\216\201\234?;\272\203w\247SN\241HB\312\242\222"
  "\247XR\272\205w\301\213~\251aY\273\177u\226--\273\202u\233,-\307\231\213"
  "\270\177q\260f]\251LJ\306\227\213\243\064\062\260^\\\315\236\217\241;\067\325"
  "\256\236\306\243\223\274rf\242EA\324\261\241\267~r\245>=\301\206|\271tn\243"
  "-,\300\216\201\270nf\243=:\323\274\254\307\232\216\234--\313\240\222\262"
  "vk\266tl\234--\317\252\232\251GG\246KI\306\237\220\236\065\064\274zs\322\264"
  "\244\233\062/\276\214\201\301\211~\263me\252RN\247[T\320\262\243\234\061\060"
  "\275\177u\300\216\204\226*(\274\215\201\251TQ\233:\066\304\226\211\235B?\300"
  "\220\203\231\061.\271\203u\301\223\207\217##\273\206w\270\203v\262nb\232\066"
  "\063\316\254\231\247OG\254PL\244\071\071\261f^\325\255\240\236\063\060\313\232"
  "\215\265d\\\240\060\060\304\223\207\264[T\246MM\323\260\243\257JH\254XT\243"
  "+-\303\224\207\275{t\242DA\331\271\252\250II\266ig\301\202|\236'+\311\243"
  "\224\261e^\265cZ\244=:\240?:\313\243\224\244C@\261od\307\230\213\252XU\302"
  "\221\204\231+)\306\222\207\301\215\201\233\064\061\312\244\225\231,,\264h`"
  "\273\210}\227),\300\213\177\304\226\212\275\212\177\224\063\061\261ph\305\244"
  "\223\235C>\233IB\315\243\225\215%#\271yn\272\202w\232\061\061\300\217\203\262"
  "bX\235;\070\321\256\235\257XP\266jb\310\232\210\236\063\060\303\216\201\266"
  "od\243?=\303\205|\244?<\314\242\226\252IC\254SQ\316\243\227\247IE\304\224"
  "\206\277zr\251EA\316\253\235\244<;\261\\U\254LJ\275}t\270xm\231+)\306\230"
  "\214\253\\U\252HG\313\244\227\246MI\272}r\300\212\200\232..\251QN\264i`\303"
  "\210|\232))\273\204y\265pf\227#%\263j`\275\213\201\235:\071\274\212\177\266"
  "uk\230.,\247TO\275\220\201\231\060/\263ph\257ka\251VR\221((\263pf\272\200"
  "w\225\063\060\274\211{\231\065\063\306\226\210\251UL\242=;\316\252\230\301\207"
  "{\241\064\063\310\226\211\264ph\300\211|\243\071\071\263e_\274}q\247DC\313\244"
  "\226\254ML\253YT\321\270\253\262aZ\242?=\303\220\203\264|n\271oe\247@?\274"
  "|q\241D?\275\206}\301\212}\234\066\066\310\237\220\310\237\217\243A?\265oh"
  "\274\207}\267|q\233\066\062\266|s\237EA\264ne\310\232\215\230\061\061\300\216"
  "\201\307\230\214\272\177v\240@>\272\204z\317\261\243\221'(\261me\243RL\250"
  "[S\307\234\216\232\065\065\275\204{\265rj\262nb\276\205{\230\070\066\310\243"
  "\220\310\230\210\270wj\240\071\067\326\265\247\246LF\244D@\313\245\225\240"
  ":\066\246CB\265nf\316\250\231\231\061\061\316\247\230\305\236\222\260f\\\246"
  "@?\331\274\255\241B>\267ql\316\245\227\236//\243@<\312\244\223\273\177w\240"
  ";\071\317\254\233\306\235\216\232--\273~x\274yq\236\065\066\317\256\241\235"
  ">:\243GD\250WP\326\305\261\244==\262sj\315\261\236\237\064\063\252^Y\300\214"
  "~\224,-\312\251\234\247TM\247VQ\244NJ\262|q\305\224\212\222+*\305\235\215"
  "\240FA\243MH\277\221\203\221&&\300\220\202\277\222\206\224/.\305\223\207"
  "\234HB\231(*\252[W\253]U\236\066\067\325\272\247\241C?\253XV\324\260\237\254"
  "g^\321\262\241\240D?\314\244\230\253]V\235+/\274zs\254KG\246EC\310\244\226"
  "\233\062/\270yp\307\234\214\276\216\200\305\214\202\242FD\316\256\237\243"
  "GE\236B@\273~t\232--\300\221\205\254[T\235@?\323\261\241\246WN\316\257\236"
  "\242TP\250cZ\272\205x\225\061\061\277\215\200\235\062\061\266|q\261of\224**\315"
  "\255\231\234E@\246\\S\323\266\244\227?\070\263ym\262sj\276\210\177\231;\066"
  "\257k`\266zn\214%\"\303\232\210\244ZT\221()\251cY\274\207x\227*+\306\227"
  "\210\252YO\231>\071\312\240\220\240<\067\256[X\330\305\257\247RJ\264tl\265"
  "wl\261pf\275{r\236\066\064\320\264\243\255UP\255`Z\304\224\207\236.-\276|v"
  "\312\250\231\236\062\060\313\251\232\254^X\272}q\240B?\262nd\302\223\206\237"
  "?=\304\230\215\247NJ\232A>\325\277\255\252YT\245RK\312\245\226\235NG\251"
  "SN\221(&\306\241\221\234=:\276\212\177\255_Y\224./\311\245\226\307\247\225"
  "\225;\070\264yk\256og\237JD\216('\264xn\231E?\263xm\253lb\213('\273\210{\265"
  "\201t\302\240\217\235\064\062\263xm\261k`\270\200t\256aY\245MJ\310\235\216"
  "\240\062\063\255[W\277\207{\233\065\063\313\245\227\266zo\242=;\301\217\201\261"
  "[W\270\177x\254\\V\260f`\303\226\211\233.-\266vn\257aY\240AA\316\261\243"
  "\250\\W\254`Z\302\223\207\247XS\263wl\234A=\307\236\221\241KF\242IE\271\177"
  "t\232\064\063\256uj\302\226\210\233=;\277\207~\265\200u\263vj\232=\070\304\231"
  "\214\255d\\\231\070\066\277\216\200\223\060/\265th\267\206{\265\201u\210(&\264"
  "{o\276\221\203\224\067\063\266\205v\266|o\213((\307\242\223\241\\T\273\203"
  "w\270vl\227,*\224,,\266\202y\251TN\246VQ\320\247\226\230+)\231.-\265|s\263"
  "vm\230-,\304\231\214\253WR\245JF\235A@\266vr\244EA\256fa\311\242\222\225"
  "''\233,,\315\235\220\250XR\246FC\275\215\202\237\060\062\246GC\247UP\256md"
  "\227\065\066\313\254\233\240D?\230\065\064\226;\070\307\240\221\226\063\062\267"
  "\204y\257ng\216!#\235IC\261vl\224,+\301\227\210\250^V\235JD\240KF\231B=\301"
  "\226\213\217)(\274\207z\262}q\225\062\061\263\177r\211)'\262zm\267ym\214)'"
  "\276\226\210\275\201t\224/.\305\231\212\240EB\231=:\312\244\224\240\067\066"
  "\245YU\313\242\220\252c\\\265wo\232,+\301\226\212\260id\240IE\313\250\233"
  "\241><\262ke\313\247\231\237\062\062\254gc\300\217\205\300\213\201\247TN\241"
  "\070\066\305\236\223\241BC\264ri\273\212\201\232\065\067\304\240\221\251UR\226"
  "\064\064\277\225\207\240TN\303\231\215\222))\255i`\262yn\217)&\274\213}\242"
  "IE\252ia\251md\217((\275\214\200\232@;\227\071\066\302\232\210\211(%\264yl"
  "\257\177r\214!\"\235MF\225GC\267\200w\213$%\255wj\241VN\213%&\225\062\060\303"
  "\234\214\252^V\222-.\305\247\224\246^V\261jc\220\040\040\271\210{\267\202u"
  "\226\060/\276\221\201\255b[\235A>\321\272\247\244RL\237>=\307\251\231\245"
  "\\V\257jb\232))\305\235\220\253`Z\241A>\307\241\223\244KJ\253ia\326\300\254"
  "\223\"%\270\201w\261sm\271}r\225,*\250^X\313\247\232\215++\262nh\271\204"
  "}\223:\066\313\246\225\251ic\222\062\061\266\213{\262wl\242ZT\225\064\062\275"
  "\224\204\274\212{\207$\"\251la\260vl\214*'\263\177r\244dZ\223>:\267\212}"
  "\255uj\214\067\064\256|n\246f\\\300\224\207\266{q\307\235\213\234?;\265|t\274"
  "\207{\224*)\272}s\260oe\225\066\064\301\222\204\245YR\240EA\275\212~\254gb"
  "\317\262\241\246QK\263wn\273\202v\226\062\061\274\216\200\252[T\242FA\312\250"
  "\232\237GC\250aY\257nh\267\202w\311\242\221\240JG\305\234\216\232;\071\240"
  "GD\277\210~\216,+\264xp\265\202x\225:\066\265\203v\254wm\306\244\224\230D"
  "A\274\224\205\231F>\225::\241TO\263\202v\213$!\263wm\264\177u\217\065\064\271"
  "\217\177\317\266\244\223;\066\262~r\245f^\223B>\220;\070\244_W\263\207z\223"
  "\063\063\217''\243^U\313\253\226\226?;\260sk\307\254\231\250h`\220)(\265\201"
  "s\245VQ\232A=\273\225\210\227\063\061\237A=\240MI\316\262\241\242MJ\260~s\317"
  "\267\243\235LH\235@=\273\225\210\234;=\243ZS\262xo\225:\070\231\064\066\261"
  "um\303\222\203\234GE\311\254\234\300\227\213\224-.\270}q\256\201v\223,*\262"
  "\203v\226D@\213)&\241_X\300\233\211\225D@\310\253\227\244pd\263\177t\207"
  "\"\"\263|o\256wo\213--\262\202u\225C?\224KI\275\231\211\217>:\300\231\214"
  "\240]T\224EB\260~s\210*)",
};

int cubos[altoMapa][largoMapa][2];

//inicia sdl
bool init_sdl() {
    //Initialize all SDL subsystems
    if( SDL_Init( SDL_INIT_EVERYTHING ) == -1 )
    {
        return false;
    }
    //Initialize SDL_mixer
    if( Mix_OpenAudio( 22050, MIX_DEFAULT_FORMAT, 2, 4096 ) == -1 )
    {
        return false;
    }

    //If everything initialized fine
    return true;
}

//carga los archivos
bool load_files_sdl(){
    //Load the music
    music = Mix_LoadMUS( "breakout.wav" );

    //If there was a problem loading the music
    if( music == NULL )
    {
        return false;
    }

    //Load the sound effects
    scratch = Mix_LoadWAV( "effect.wav" );

    //If there was a problem loading the sound effects
    if( ( scratch == NULL ) )
    {
        return false;
    }
    //If everything loaded fine
    return true;
}


//Esta función carga de la matriz inicial las coordenadas de todos los cubos
//con el fin de optimizar el proceso de dibujo
void parseCubos(){
    //(initX,initZ) es la esquina superior izquierda de todo el mapa
    initX = -(tamCubo*largoMapa)/2.0;
    initZ = -(tamCubo*altoMapa)/2.0;
    //cubos = new int[altoMapa][largoMapa][2]; // 2 coordenadas por cubo (esquina superior izquierda)
    for(int i=0;i<altoMapa;i++){
        for(int j=0;j<largoMapa;j++){
            cubos[i][j][0] = initX+(tamCubo*j);
            cubos[i][j][1] = initZ+(tamCubo*i);
            if(mapa[i][j]==2){
                posZ=i;
                posZi=posZ;
                posX=j;
                posXi=posX;
                xActual = initX+(tamCubo*j);

                xActuali=xActual;
                zActual = initZ+(tamCubo*i);
                zActuali = zActual;
                printf ("actualxxxx %d \n",xActual);
                printf ("actualzzzzz %d \n",zActual);
            }
        }
    }

    //Definimos la distancia de la cámara/foco según el tamaño del mapa
    double w = (largoMapa/2.0);
    double h = (altoMapa/2.0);
    int hipotenusa = (ceil(sqrt(w*w + h*h))+2) * tamCubo;
    camX = light_position[0] = 0.0f;
    camY = light_position[1] = minCamY;
    camZ = light_position[2] = hipotenusa;
    printf("%d\n",hipotenusa);
}
void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    int maxi = (sqrt(largoMapa*largoMapa + altoMapa*altoMapa)+3) * tamCubo;
    gluPerspective(90.0,width/height,10,maxi);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void define_textura_2D_128(struct ttextura_gimp textuN){
  glGenTextures(1,&textureID);          // Genera la textura 1 con la variable texture
  glBindTexture(GL_TEXTURE_2D,textureID);   // Asocia la variable texture como GL_TEXTURE_2D
  glTexEnvf( GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);  // Asigna Gl_MODULATE A GL_TEXTURE_ENV_MODE
  gluBuild2DMipmaps( GL_TEXTURE_2D, textuN.bytes_per_pixel,textuN.width,textuN.height,GL_RGB,GL_UNSIGNED_BYTE,textuN.pixel_data );
    // Define las propiedasdes de la textura 2D asociando la textura exportada gimp_image a la GL_TEXTURE_2D
};

void dibujarCubo(int X, int Z, int a){
 // aqui se cambia el color de los cuadros tanto del piso como el del techo
 //*******************************IIMPORTANTE
    if (a!=120)
    {
      /* code */glColor4f(1.0,1.0,1.0,1.0);
    }else{
      glColor4f(1.0,1.50,0.50,1.0);}
    glBegin(GL_QUADS);
        //Cara de enfrente
        glNormal3f(0.0f, 0.0f, 1.0f);
        glTexCoord2d(0.0,0.0);   glVertex3f(X-espacios,espacios+a,Z+espacios);
        glTexCoord2d(0.0,1.0);   glVertex3f(X-espacios,-espacios+a,Z+espacios);
        glTexCoord2d(1.0,1.0);   glVertex3f(X+espacios,-espacios+a,Z+espacios);
        glTexCoord2d(1.0,0.0);   glVertex3f(X+espacios,espacios+a,Z+espacios);

        //Cara izquierda
        glNormal3f(-1.0f, 0.0f, 0.0f);
        glTexCoord2d(0.0,0.0);   glVertex3f(X-espacios,espacios+a,Z-espacios);
        glTexCoord2d(0.0,1.0);   glVertex3f(X-espacios,-espacios+a,Z-espacios);
        glTexCoord2d(1.0,1.0);   glVertex3f(X-espacios,-espacios+a,Z+espacios);
        glTexCoord2d(1.0,0.0);   glVertex3f(X-espacios,espacios+a,Z+espacios);

        //Cara de atrás
        glNormal3f(0.0f, 0.0f, -1.0f);
        glTexCoord2d(0.0,0.0);   glVertex3f(X+espacios,espacios+a,Z-espacios);
        glTexCoord2d(0.0,1.0);   glVertex3f(X+espacios,-espacios+a,Z-espacios);
        glTexCoord2d(1.0,1.0);   glVertex3f(X-espacios,-espacios+a,Z-espacios);
        glTexCoord2d(1.0,0.0);   glVertex3f(X-espacios,espacios+a,Z-espacios);

        //Cara derecha
        glNormal3f(1.0f, 0.0f, 0.0f);
        glTexCoord2d(0.0,0.0);   glVertex3f(X+espacios,espacios+a,Z+espacios);
        glTexCoord2d(0.0,1.0);   glVertex3f(X+espacios,-espacios+a,Z+espacios);
        glTexCoord2d(1.0,1.0);   glVertex3f(X+espacios,-espacios+a,Z-espacios);
        glTexCoord2d(1.0,0.0);   glVertex3f(X+espacios,espacios+a,Z-espacios);

        //Cara Arriba
        glNormal3f(0.0f, 1.0f, 0.0f);
        glTexCoord2d(0.0,0.0);   glVertex3f(X-espacios,espacios+a,Z-espacios);
        glTexCoord2d(0.0,1.0);   glVertex3f(X-espacios,espacios+a,Z+espacios);
        glTexCoord2d(1.0,1.0);   glVertex3f(X+espacios,espacios+a,Z+espacios);
        glTexCoord2d(1.0,0.0);   glVertex3f(X+espacios,espacios+a,Z-espacios);
    glEnd();
}

bool esValido(int X, int Z) {
    return X>=0 && X<largoMapa && Z>=0 && Z<altoMapa;
}


void dibujarPiso(int X, int Y, int Z){
    glPushMatrix();
    glColor3f(1,1,1);

    glBegin(GL_QUADS);
        glNormal3f(0.0f, 1.0f, 0.0f); //Hacia arriba
        glVertex3f(X-espacios,Y,Z-espacios);
        glVertex3f(X-espacios,Y,Z+espacios);
        glVertex3f(X+espacios,Y,Z+espacios);
        glVertex3f(X+espacios,Y,Z-espacios);
    glEnd();
    glColor3f(0,0,0);

    glPopMatrix();


}

void dibujaMapa(){
  //float x,y;
  define_textura_2D_128(textura_ladrillos);
  for(int i=0;i<altoMapa;i++){
        for(int j=0;j<largoMapa;j++){
            switch(mapa[i][j]){
                case 0:
                case 2:

                    dibujarPiso(cubos[i][j][0],-espacios,cubos[i][j][1]);
                    break;
                case 1:
                     //Carga el cubo con textura
                    glPushMatrix();
                    glEnable(GL_TEXTURE_2D);    // Habilita la GL_TEXTURE_2D
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],0);
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],20);
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],40);
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],60);
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],80);
                    glDisable(GL_TEXTURE_2D);



                    //DIBUJAMOS EL TECHO CON OTRO COLOR.
                    glPushMatrix();
                    glColor3f(0,1.0,1.0);
                    dibujarCubo(cubos[i][j][0],cubos[i][j][1],120);
                    glPopMatrix();


                    glPopMatrix();

                break;

                case 3:
                    glPushMatrix();
                    glColor3f(0,1,1);
                    glTranslatef(cubos[i][j][0],0,cubos[i][j][1]);
                    glutSolidCube(tamCubo);
                    glPopMatrix();
                break;
            }
        }
    }
    if (salto==true) //SIRVE PARA SABER SI SE MOVERA EL CUBO EN Y Y NO EN Z GIRANDO
    {
    glPushMatrix();
    glColor3f(1,0,0);
    glTranslatef(xActual,saltocont,zActual);
    glRotatef(rotx,1,0,0);
    glRotatef(roty,0,1,0);
    glutSolidCube(tamCubo);
    glPopMatrix();        //  salto=false;
    }else{
    glPushMatrix();
    glColor3f(1,0,0);
    glTranslatef(xActual,0,zActual);
    glRotatef(rotx,1,0,0);
    glRotatef(roty,0,1,0);
    glutSolidCube(tamCubo);
    glPopMatrix();
  }
  salto==false;
}


// función que muestra por pantalla la escena.
void display() {
  //***********************CAMARA********************************************
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    gluLookAt(camX+avancex-20,camY+100,camZ+260+avancez,  //LAS VARIABÑES DE AVANCE SE USAN PARA SABER MAS ADELANTE LAS POSICIONES Y ASI MOVER EL CUBO Y LA CAMARA
              0+avancex-20,0,0+avancez+160,
              camX,camY+1,camZ);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
    dibujaMapa();
    text();
    glutSwapBuffers();
}

//RESETEAR SIRVE PARA BORRAR LOS VALORES DE LOS AVANCES QUE HACE QUE SE MUEVA LA CAMARA
//ASI COMO TAMBIEN LA POSCION DEL CUBO LLEVANDOLO A SU INICIO
void resetear(int a){
  switch(a){
    case 1:
      for (int i = 0; i < tamCubo; i++){
                  zActual-=1;
                  rotx-=4.5;
                  display();
                }
                posZ--;
                for (int i = 0; i < 20; ++i)
                {
                  /* code */roty+=18;
                            display();
                }
                  avancex=0;
                  avancez=0;
                  xActual=xActuali;
                  zActual=zActuali;
                  posX=posXi;
                  posZ=posZi;
    break;
  case 2:
    for (int i = 0; i < tamCubo; i++)
                {
                    zActual+=1;
                    rotx+=4.5;
                    avancez++;
                    display();
                }
                posZ++;
                for (int i = 0; i < 20; ++i)
                {
                  /* code */roty+=18;
                            display();
                }
                  avancex=0;
                  avancez=0;
                  xActual=xActuali;
                  zActual=zActuali;
                  posX=posXi;
                  posZ=posZi;
  break;
  case 3:
    for (int i = 0; i < tamCubo; i++){
                    xActual-=1;
                    roty+=4.5;
                    avancex--;
                    display();
                }
                posX--;
                for (int i = 0; i < 20; ++i)
                {
                  /* code */roty+=18;
                            display();
                }
                  avancex=0;
                  avancez=0;
                  xActual=xActuali;
                  zActual=zActuali;
                  posX=posXi;
                  posZ=posZi;
  break;
  case 4:
    for (int i = 0; i < tamCubo; i++){
                    xActual+=1;
                    roty-=4.5;
                    avancex++;
                    display();
                }
                posX++;
                for (int i = 0; i < 20; ++i)
                {
                  /* code */roty+=18;
                            display();
                }
                  avancex=0;
                  avancez=0;
                  xActual=xActuali;
                  zActual=zActuali;
                  posX=posXi;
                  posZ=posZi;
  }
}
void resetear2(){

                //posZ--;
                for (int i = 0; i < 20; ++i)
                {
                  /* code */roty+=18;
                            display();
                }
                  avancex=0;
                  avancez=0;
                  xActual=xActuali;
                  zActual=zActuali;
                  posX=posXi;
                  posZ=posZi;
}

void init() {
    glClearColor(0,0,0,0);
    camX = light_position[0] = 0.0f,camY = light_position[1] = 160.0f, camZ = light_position[2] =120.0f;
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LESS);

    glEnable(GL_LIGHT0);
    glEnable(GL_NORMALIZE);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_CULL_FACE);
    glEnable(GL_LIGHTING);

    glLightfv(GL_LIGHT0, GL_SPOT_DIRECTION,light_spot_dir);
    glLightfv(GL_LIGHT0, GL_AMBIENT,  light_ambient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE,  light_diffuse);
    glLightfv(GL_LIGHT0, GL_LINEAR_ATTENUATION, light_attenuation);
    glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
    glLightfv(GL_LIGHT0, GL_POSITION, light_position);
}
//aqui con las variables de posicion verificamos si se encuentra en la posicion
//pre establecida
//----regresa el cubo a la posicion original
void teletransporte(){
if (avancex==0 & avancez==-100)
            {
                  resetear2();
                  avancex:0;
                  avancez=-200;
                  posX=posX;
                  posZ=posZ-10;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }
            if (avancex==0 && avancez==-460)
            {
             resetear2();;
                  avancex=-220;

                  avancez=-200;
                  posX=posX-11;
                  avancex=-220;
                  posZ=posZ-10;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }
            if (avancex==-260 && avancez==-460)
            {
             resetear2();;
                  avancex=160;

                  avancez=-240;
                  posX=posX+8;
                  avancex=160;
                  posZ=posZ-12;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }

            if (avancex==340 && avancez==-280)
            {
             resetear2();
                  avancex=160;
                  avancez=-400;
                  posX=posX+8;
                  avancex=160;
                  posZ=posZ-12-8;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }if (avancex==200 && avancez==-440)
            {
             resetear2();
                  avancex=-340;
                  avancez=-680;
                  posX=posX-17;
                  posZ=posZ-34;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }
}
void moverCubo(int direccion){
   printf ("si entra por el momento %d \n",avancez);
   printf ("valor de direccion %d \n",direccion);
   //********************************************************LA DESICION DEL IF SIRVE ARA SABER SI HAN USADO LA BARRA ESPACIADORA PARA PODER SALTAR
    if (direccion==32)
    {
      salto=true;
      for (saltocont; saltocont < 20; ++saltocont)
      {
        rotx-=9;
        /* code */display();
      }
      for (saltocont; saltocont > 0; --saltocont)
      {
        rotx-=9;
        /* code */display();
      }
      //display();
      salto=false;
    }

    switch(direccion){
        case MOV_ARRIBA://*****************LA PARTE MAS IMPORTATE AQUI SE ENCUENTRAN LA MAYORIA DE LAS CONDICIONES PARA EL CUBO
        printf ("z %d \n",avancez);
        printf ("x %d \n",avancex);//**************************SI EN LA MATRIZ EL SIGUIENTE MOV ES UN PUESTO VACIO DE NUMERO 4 SE RESETEA
          if (esValido(posX,posZ-1) && mapa[posZ-1][posX]==4)
                {
                  resetear(1);
                }
            else if(esValido(posX,posZ-1) && mapa[posZ-1][posX]!=1){

                for (int i = 0; i < tamCubo; i++)
                {
                    zActual-=1;
                    rotx-=4.5;
                    avancez--;
                    display();
                }
                posZ--;

                teletransporte();
            //nooooooota importante lo del traslado pulsar meterla en una funsion dentro del display
          }else{
              printf ("no entra a ninguna condición %d \n",avancez);
            }
            break;
        case MOV_ABAJO://Abajo /// lo mismo para saber si hay un hueco de valo r 4 si no se evalua si hay pared
            if(esValido(posX,posZ+1) && mapa[posZ+1][posX]==4){
              resetear(2);
            } else if(esValido(posX,posZ+1) && mapa[posZ+1][posX]!=1){
                for (int i = 0; i < tamCubo; i++)
                {
                    zActual+=1;
                    rotx+=4.5;
                    avancez++;
                    display();
                }
                posZ++;
            }
            break;
        case MOV_IZQUIERDA://Izquierda
            if(esValido(posX-1,posZ) && mapa[posZ][posX-1]==4){
              resetear(3);
            }
            else if(esValido(posX-1,posZ) && mapa[posZ][posX-1]!=1){
                for (int i = 0; i < tamCubo; i++){
                    xActual-=1;
                    roty+=4.5;
                    avancex--;
                    display();
                }
                posX--;
            }
            if (avancex==120 && avancez==-200)
            {
             resetear2();
                  avancex=300;

                  avancez=-240;
                  posX=posX+8+7;
                  avancex=300;
                  posZ=posZ-12;
                  zActual=zActual+avancez;
                  xActual=xActual+avancex;
              display();
            }
            break;
        case MOV_DERECHA://Derecha
            if(esValido(posX+1,posZ) && mapa[posZ][posX+1]==4){
              resetear(4);
            }
            else if(esValido(posX+1,posZ) && mapa[posZ][posX+1]!=1){
                for (int i = 0; i < tamCubo; i++){
                    xActual+=1;
                    roty-=4.5;
                    avancex++;
                    display();
                }
                posX++;
            }
            break;
    }
}

// Función para controlar teclas especiales
void specialKeys( int key, int x, int y )
{

    //  Flecha derecha: aumentar rotación 7 grados
    if (key == GLUT_KEY_RIGHT){
        moverCubo(MOV_DERECHA);
        Mix_PlayChannel( -1, scratch, 0 );}
    //  Flecha izquierda: rotación en eje Y negativo 7 grados
    else if (key == GLUT_KEY_LEFT){
        moverCubo(MOV_IZQUIERDA);
        Mix_PlayChannel( -1, scratch, 0 );}
    //  Flecha arriba: rotación en eje X positivo 7 grados
    else if (key == GLUT_KEY_UP){
        moverCubo(MOV_ARRIBA);
        Mix_PlayChannel( -1, scratch, 0 );}
    //  Flecha abajo: rotación en eje X negativo 7 grados
    else if (key == GLUT_KEY_DOWN){
         moverCubo(MOV_ABAJO);
         Mix_PlayChannel( -1, scratch, 0 );}
    //  Solicitar actualización de visualización
    display();

}

// función que permite interactuar con la escena mediante el teclado
void keyboard(unsigned char key, int x, int y){
    float t;
    if (key==32)
    {
      moverCubo(key);
    }
    switch(key) {
    case 27:    //tecla esc
        exit(0);  //salir
        break;
    }
}

int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_DEPTH | GLUT_RGB);
    glutInitWindowPosition(50, 50);
    glutInitWindowSize(1200, 800);
    glutCreateWindow("Juegos Cubos");
    parseCubos();
    init();
    //**********************sSDL**************************++
    //Initialize
    init_sdl();
    load_files_sdl();
    Mix_PlayMusic(music, -1 );
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutSpecialFunc(specialKeys);
    glutMainLoop();
    return 0;
}
